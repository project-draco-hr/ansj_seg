{
  BufferedReader reader=IOUtil.getReader(path,IOUtil.UTF8);
  String temp=null;
  reader.readLine();
  reader.readLine();
  int maxId=Integer.parseInt(reader.readLine().split(":")[1].trim());
  reader.readLine();
  reader.readLine();
  Map<String,Integer> statusMap=new HashMap<String,Integer>();
  int tagNum=0;
  while ((temp=reader.readLine()) != null) {
    if (StringUtil.isBlank(temp)) {
      break;
    }
    statusMap.put(temp,tagNum);
    tagNum++;
  }
  status=new double[tagNum][tagNum];
  StringBuilder sb=new StringBuilder();
  while ((temp=reader.readLine()) != null) {
    if (StringUtil.isBlank(temp)) {
      break;
    }
    sb.append(temp + "\n");
  }
  this.template=Template.parse(sb.toString());
  this.template.tagNum=tagNum;
  this.template.statusMap=statusMap;
  int featureNum=template.ft.length;
  TempFeature[] tempFeatureArr=new TempFeature[maxId / tagNum];
  String[] split=reader.readLine().split(" ");
  int bIndex=Integer.parseInt(split[0]) / tagNum;
  TempFeature tf=null;
  while ((temp=reader.readLine()) != null) {
    if (StringUtil.isBlank(temp)) {
      break;
    }
    tf=new TempFeature(temp,tagNum);
    tempFeatureArr[tf.id]=tf;
  }
  myGrad=new HashMap<String,Feature>();
  Feature feature=null;
  for (int i=0; i < tempFeatureArr.length; i++) {
    if (i == bIndex) {
      for (int j=0; j < tagNum; j++) {
        for (int j2=0; j2 < tagNum; j2++) {
          status[j][j2]=Double.parseDouble(reader.readLine());
        }
      }
      i+=tagNum - 1;
      continue;
    }
    tf=tempFeatureArr[i];
    feature=myGrad.get(tf.name);
    if (feature == null) {
      feature=new Feature(featureNum,tagNum);
      myGrad.put(tf.name,feature);
    }
    for (int j=0; j < tagNum; j++) {
      double f=Double.parseDouble(reader.readLine());
      feature.update(tf.featureId,j,f);
    }
  }
}
