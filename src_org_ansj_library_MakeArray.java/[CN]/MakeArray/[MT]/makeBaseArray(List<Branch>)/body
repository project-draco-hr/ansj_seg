{
  char[] chars=null;
  int length=0;
  Branch tempValueResult;
  int tempBase=0;
  String temp=null;
  Branch branch=null;
  for (int i=0; i < all.size(); i++) {
    branch=all.get(i);
    temp=branch.getValue();
    chars=temp.toCharArray();
    length=chars.length;
    if (length == 1) {
      base[chars[0]]=65536;
      check[chars[0]]=-1;
      status[chars[0]]=branch.getStatus();
      words[chars[0]]=temp;
      natures[chars[0]]=branch.getNatures();
    }
 else {
      int previousCheck=getBaseNum(chars);
      if (previous == previousCheck) {
        tempStringMap.put(temp,branch);
        continue;
      }
      if (tempStringMap.size() > 0) {
        setBaseValue(tempStringMap,previous);
        it=tempStringMap.values().iterator();
        while (it.hasNext()) {
          tempValueResult=it.next();
          chars=tempValueResult.getValue().toCharArray();
          tempBase=base[previous] + chars[chars.length - 1];
          base[tempBase]=tempBase;
          check[tempBase]=previous;
          status[tempBase]=tempValueResult.getStatus();
          words[tempBase]=tempValueResult.getValue();
          natures[tempBase]=tempValueResult.getNatures();
        }
      }
      previous=previousCheck;
      tempStringMap=new HashMap<String,Branch>();
      tempStringMap.put(temp,branch);
    }
  }
}
