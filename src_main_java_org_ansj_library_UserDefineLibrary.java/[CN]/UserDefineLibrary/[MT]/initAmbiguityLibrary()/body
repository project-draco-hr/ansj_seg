{
  File[] lib=findLibrary(MyStaticValue.ambiguityLibrary);
  if (lib.length > 0) {
    ambiguityForest=new Forest();
    for (    File file : lib) {
      try (BufferedReader br=IOUtil.getReader(file,"utf-8")){
        String temp;
        while ((temp=br.readLine()) != null) {
          if (StringUtil.isNotBlank(temp)) {
            temp=StringUtil.trim(temp);
            String[] split=temp.split("\t");
            StringBuilder sb=new StringBuilder();
            if (split.length % 2 != 0) {
              LIBRARYLOG.error("init ambiguity  error in line :" + temp + " format err !");
            }
            for (int i=0; i < split.length; i+=2) {
              sb.append(split[i]);
            }
            ambiguityForest.addBranch(sb.toString(),split);
          }
        }
      }
 catch (      UnsupportedEncodingException e) {
        LIBRARYLOG.warn("??????????????????",e);
      }
catch (      IOException e) {
        LIBRARYLOG.warn("Init ambiguity library error :{}, path: {}",e.getMessage(),file.getPath());
      }
    }
    LIBRARYLOG.info("Init ambiguity library ok!");
  }
 else {
    LIBRARYLOG.warn("Init ambiguity library warning :{} because : file not found or failed to read !",MyStaticValue.ambiguityLibrary);
  }
}
