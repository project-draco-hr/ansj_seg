{
  Merger merger=new Merger(){
    @Override public List<Term> merger(){
      graph.walkPath();
      if (MyStaticValue.isNumRecognition && graph.hasNum) {
        NumRecognition.recognition(graph.terms);
      }
      if (graph.hasPerson && MyStaticValue.isNameRecognition) {
        new AsianPersonRecognition(graph.terms).recognition();
        graph.walkPathByScore();
        NameFix.nameAmbiguity(graph.terms);
        new ForeignPersonRecognition(graph.terms).recognition();
        graph.walkPathByScore();
      }
      userDefineRecognition(graph,forests);
      return result();
    }
    private void userDefineRecognition(    final Graph graph,    Forest... forests){
      new UserDefineRecognition(graph.terms,forests).recognition();
      graph.rmLittlePath();
      graph.walkPathByScore();
    }
    /** 
 * ???????????????
 * @return
 */
    private List<Term> result(){
      String temp=null;
      List<Term> result=new LinkedList<Term>();
      int length=graph.terms.length - 1;
      for (int i=0; i < length; i++) {
        if (graph.terms[i] != null) {
          result.add(graph.terms[i]);
        }
      }
      LinkedList<Term> last=new LinkedList<Term>();
      for (      Term term : result) {
        if (term.getName().length() >= 3) {
          GetWordsImpl gwi=new GetWordsImpl(term.getName());
          while ((temp=gwi.allWords()) != null) {
            if (temp.length() < term.getName().length()) {
              last.add(new Term(temp,gwi.offe + term.getOffe(),TermNatures.NULL));
            }
          }
        }
      }
      result.addAll(last);
      setRealName(graph,result);
      return result;
    }
  }
;
  return merger.merger();
}
