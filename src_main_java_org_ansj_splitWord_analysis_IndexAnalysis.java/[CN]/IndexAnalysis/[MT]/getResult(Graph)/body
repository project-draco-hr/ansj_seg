{
  Merger merger=new Merger(){
    @Override public List<Term> merger(){
      graph.walkPath();
      List<Term> last=new LinkedList<Term>();
      Set<Long> filter=new HashSet<Long>();
      if (MyStaticValue.isNumRecognition)       NumRecognition.recognition(graph.terms);
      if (MyStaticValue.isNameRecognition) {
        List<Term> newTerms=new AsianPersonRecognition(graph.terms).getNewTerms();
        insert2Last(last,filter,newTerms);
        newTerms=new ForeignPersonRecognition(graph.terms).getNewTerms();
        insert2Last(last,filter,newTerms);
      }
      new UserDefineRecognition(graph.terms,forests).recognition();
      return result(last,filter);
    }
    private void insert2Last(    List<Term> last,    Set<Long> filter,    List<Term> newTerms){
      for (      Term term : newTerms) {
        long key=term2Key(term);
        if (filter.contains(key)) {
          continue;
        }
        last.add(term);
        filter.add(key);
      }
    }
    private long term2Key(    Term term){
      return (term.getOffe() + 1) * 100 + term.getName().length();
    }
    /** 
 * ???????????????
 * @return
 */
    private List<Term> result(    List<Term> last,    Set<Long> filter){
      List<Term> result=new LinkedList<Term>();
      Term term=null;
      String temp=null;
      int length=graph.terms.length - 1;
      long key=0;
      for (int i=0; i < length; i++) {
        term=graph.terms[i];
        if (term == null) {
          continue;
        }
        filter.add(term2Key(term));
        result.add(term);
      }
      for (int i=0; i < length; i++) {
        term=graph.terms[i];
        if (term == null) {
          continue;
        }
        term=term.getNext();
        while (term != null) {
          key=term2Key(term);
          if (!filter.contains(key)) {
            result.add(term);
            filter.add(key);
          }
          term=term.getNext();
          if (term == null) {
            break;
          }
        }
      }
      for (      Term term2 : result) {
        if (term2.getName().length() >= 3) {
          GetWordsImpl gwi=new GetWordsImpl(term2.getName());
          while ((temp=gwi.allWords()) != null) {
            if (!filter.contains(term2.getOffe() + temp.length()) && temp.length() < term2.getName().length()) {
              filter.add((long)(term2.getOffe() + temp.length()));
              last.add(new Term(temp,gwi.offe + term2.getOffe(),TermNatures.NULL));
            }
          }
        }
      }
      result.addAll(last);
      setRealName(graph,result);
      return result;
    }
  }
;
  return merger.merger();
}
