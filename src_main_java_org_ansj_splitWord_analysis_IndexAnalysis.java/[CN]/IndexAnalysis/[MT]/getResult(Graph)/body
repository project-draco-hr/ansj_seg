{
  Merger merger=new Merger(){
    @Override public List<Term> merger(){
      graph.walkPath();
      if (MyStaticValue.isNumRecognition && graph.hasNum) {
        NumRecognition.recognition(graph.terms);
      }
      if (graph.hasPerson && MyStaticValue.isNameRecognition) {
        new AsianPersonRecognition(graph.terms).recognition();
        graph.walkPathByScore();
        NameFix.nameAmbiguity(graph.terms);
        new ForeignPersonRecognition(graph.terms).recognition();
        graph.walkPathByScore();
      }
      userDefineRecognition(graph,forests);
      return result();
    }
    private void userDefineRecognition(    final Graph graph,    Forest... forests){
      new UserDefineRecognition(graph.terms,0,forests).recognition();
      graph.rmLittlePath();
      graph.walkPathByScore();
    }
    /** 
 * ???????????????
 * @return
 */
    private List<Term> result(){
      String temp=null;
      Set<String> set=new HashSet<String>();
      List<Term> result=new LinkedList<Term>();
      int length=graph.terms.length - 1;
      for (int i=0; i < length; i++) {
        if (graph.terms[i] != null) {
          result.add(graph.terms[i]);
          set.add(graph.terms[i].getName() + graph.terms[i].getOffe());
        }
      }
      LinkedList<Term> last=new LinkedList<Term>();
      Forest[] tempForests=DEFAULT_FORESTS;
      if (forests != null && forests.length > 0) {
        tempForests=forests;
      }
      char[] chars=graph.chars;
      for (      Forest forest : tempForests) {
        GetWord word=forest.getWord(chars);
        while ((temp=word.getAllWords()) != null) {
          if (!set.contains(temp + word.offe)) {
            set.add(temp + word.offe);
            last.add(new Term(temp,word.offe,word.getParam(0),ObjConver.getIntValue(word.getParam(1))));
          }
        }
      }
      result.addAll(last);
      setRealName(graph,result);
      return result;
    }
  }
;
  return merger.merger();
}
