{
  HashSet<String> hs=new HashSet<String>();
  BufferedReader filter=IOUtil.getReader("library/stop/stopLibrary.dic","UTF-8");
  String temp=null;
  while ((temp=filter.readLine()) != null) {
    temp=temp.trim().toLowerCase();
    hs.add(temp);
  }
  BufferedReader reader=IOUtil.getReader("/Users/ansj/Documents/temp/blogBigFile.txt","UTF-8");
  String content=null;
  ToAnalysis.paser("init");
  long start=System.currentTimeMillis();
  int size=0;
  int resultSize=0;
  long length=0;
  int i=0;
  List<Term> all=null;
  HashMap<String,Integer> hm=new HashMap<String,Integer>();
  Integer num=null;
  while ((content=reader.readLine()) != null) {
    i++;
    length+=content.length();
    TreeSet<NewTerm> newWords=NewWordFind.getNewWords(content);
    for (    NewTerm newTerm : newWords) {
      if ((num=hm.get(newTerm.getName())) != null) {
        hm.put(newTerm.getName(),++num);
      }
 else {
        hm.put(newTerm.getName(),1);
      }
    }
    if (i % 10000 == 0) {
      break;
    }
  }
  Set<Entry<String,Integer>> entrySet=hm.entrySet();
  StringBuilder sb=new StringBuilder();
  for (  Entry<String,Integer> entry : entrySet) {
    sb.append(entry.getKey() + "\t" + entry.getValue());
    sb.append("\n");
  }
  IOUtil.Writer("/Users/ansj/Documents/temp/newWord.txt","UTF-8",sb.toString());
  System.out.println(size + "\t" + resultSize);
  System.out.println((length * (long)1000) / (System.currentTimeMillis() - start));
  System.out.println(System.currentTimeMillis() - start);
}
