{
  StringBuilder sb=new StringBuilder();
  PersonNatureAttr pna=null;
  int index=0;
  int freq=0;
  double allFreq=0;
  Term term=null;
  boolean undefinite=false;
  int i=offe;
  for (; i < terms.length; i++) {
    if (terms[i] == null) {
      continue;
    }
    pna=terms[i].getTermNatures().personAttr;
    if ((freq=pna.getFreq(size,index)) == 0) {
      if (size == 3 && sb.length() > 4) {
        break;
      }
 else {
        return null;
      }
    }
    if (freq / (double)(pna.allFreq) < 50) {
      undefinite=true;
    }
    sb.append(terms[i]);
    allFreq+=freq;
    index++;
    if (size < 3 && index == size + 2) {
      break;
    }
  }
  double score=Math.log(allFreq) * factory[size];
  double endFreq=0;
  boolean flag=true;
  while (flag) {
    i++;
    if (i >= terms.length) {
      endFreq=10;
      flag=false;
    }
 else     if (terms[i] != null) {
      endFreq=terms[i].getTermNatures().personAttr.end + 1;
      flag=false;
    }
  }
  score+=Math.log(endFreq);
  score+=Math.log(beginFreq);
  term=new Term(sb.toString(),offe,TermNatures.NR);
  term.selfScore=score;
  if (undefinite && (beginFreq < 3 || endFreq < 3))   return null;
  System.out.print(term + "\t");
  System.out.print((size + 2) + "\t");
  System.out.print(Math.log(allFreq) * factory[size] + "\t");
  System.out.print(beginFreq + "\t");
  System.out.print(endFreq + "\t");
  System.out.print(term.selfScore + "\t");
  System.out.print(undefinite + "\t");
  System.out.println();
  return term;
}
