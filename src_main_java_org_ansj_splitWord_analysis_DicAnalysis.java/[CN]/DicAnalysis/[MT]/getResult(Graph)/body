{
  Merger merger=new Merger(){
    @Override public List<Term> merger(){
      userDefineRecognition(graph,forests);
      graph.walkPath();
      userDefineRecognition(graph,forests);
      if (MyStaticValue.isNumRecognition && graph.hasNum) {
        new NumRecognition().recognition(graph.terms);
      }
      if (graph.hasPerson && MyStaticValue.isNameRecognition) {
        new AsianPersonRecognition().recognition(graph.terms);
        graph.walkPathByScore();
        NameFix.nameAmbiguity(graph.terms);
        new ForeignPersonRecognition().recognition(graph.terms);
        graph.walkPathByScore();
      }
      return getResult();
    }
    private void userDefineRecognition(    final Graph graph,    Forest... forests){
      new UserDefineRecognition(InsertTermType.REPLACE,forests).recognition(graph.terms);
      graph.rmLittlePath();
      graph.walkPathByScore();
      graph.rmLittlePath();
    }
    private List<Term> getResult(){
      List<Term> result=new ArrayList<Term>();
      int length=graph.terms.length - 1;
      for (int i=0; i < length; i++) {
        if (graph.terms[i] != null) {
          result.add(graph.terms[i]);
        }
      }
      setRealName(graph,result);
      FilterModifWord.updateNature(result,forests);
      return result;
    }
  }
;
  return merger.merger();
}
