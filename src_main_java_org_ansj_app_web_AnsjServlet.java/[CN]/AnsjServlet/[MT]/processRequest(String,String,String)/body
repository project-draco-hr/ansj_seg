{
  AnsjMethod method=AnsjMethod.TO;
  if (strMethod != null) {
    method=AnsjMethod.valueOf(strMethod.toUpperCase());
  }
 else {
    method=AnsjMethod.TO;
  }
  Boolean nature=true;
  if (strNature != null && strNature.toLowerCase().equals("false")) {
    nature=false;
  }
  List<Term> terms=null;
  Collection<Keyword> keyWords=null;
switch (method) {
case TO:
    terms=ToAnalysis.parse(input);
  break;
case NLP:
terms=NlpAnalysis.parse(input);
break;
case MIN_NLP:
terms=NlpAnalysis.parse(input);
String str=terms.toString();
if (str.length() > 4) {
return str.substring(1,str.length() - 1);
}
case KEYWORD:
KeyWordComputer keyWordComputer=new KeyWordComputer(10);
keyWords=keyWordComputer.computeArticleTfidf(input);
break;
case INDEX:
terms=IndexAnalysis.parse(input);
break;
default :
terms=BaseAnalysis.parse(input);
}
if (terms != null) {
return termToString(terms,nature,method);
}
if (keyWords != null) {
return keyWordsToString(keyWords,nature);
}
return "i am error!";
}
