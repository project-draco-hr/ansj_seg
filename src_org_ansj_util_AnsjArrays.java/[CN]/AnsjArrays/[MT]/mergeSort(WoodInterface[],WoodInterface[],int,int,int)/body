{
  int length=high - low;
  if (length < INSERTIONSORT_THRESHOLD) {
    for (int i=low; i < high; i++)     for (int j=i; j > low && (dest[j - 1]).compareTo(dest[j].getC()) > 0; j--)     swap(dest,j,j - 1);
    return;
  }
  int destLow=low;
  int destHigh=high;
  low+=off;
  high+=off;
  int mid=(low + high) >>> 1;
  mergeSort(dest,src,low,mid,-off);
  mergeSort(dest,src,mid,high,-off);
  if (src[mid - 1].compareTo(src[mid].getC()) <= 0) {
    System.arraycopy(src,low,dest,destLow,length);
    return;
  }
  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {
    if (q >= high || p < mid && src[p].compareTo(src[q].getC()) <= 0)     dest[i]=src[p++];
 else     dest[i]=src[q++];
  }
}
