{
  AnsjMethod method=AnsjMethod.TO;
  if (strMethod != null) {
    method=AnsjMethod.valueOf(strMethod.toUpperCase());
  }
 else {
    method=AnsjMethod.TO;
  }
  Boolean nature=true;
  if (strNature.toLowerCase().equals("false")) {
    nature=false;
  }
  List<Term> terms=null;
switch (method) {
case TO:
    terms=ToAnalysis.parse(input);
  break;
case NLP:
terms=NlpAnalysis.parse(input);
break;
default :
terms=BaseAnalysis.parse(input);
}
if (terms == null) {
return "Failed to parse input";
}
if (nature) {
new NatureRecognition(terms).recognition();
}
StringBuilder sb=new StringBuilder();
for (Term term : terms) {
String tmp=term.getName();
if (nature) {
tmp+="/" + term.getNatrue().natureStr;
}
sb.append(tmp + " ");
}
return sb.toString();
}
