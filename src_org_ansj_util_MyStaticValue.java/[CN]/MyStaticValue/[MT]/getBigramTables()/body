{
  BigramEntry[][] result=new BigramEntry[0][0];
  BufferedReader reader=null;
  try {
    reader=IOUtil.getReader(DicReader.getInputStream("bigramdict.dic"),"UTF-8");
    String temp=null;
    String[] strs=null;
    result=new BigramEntry[InitDictionary.arrayLength][0];
    int fromId=0;
    int toId=0;
    int freq=0;
    int length=0;
    BigramEntry to=null;
    while ((temp=reader.readLine()) != null) {
      if (StringUtil.isBlank(temp)) {
        continue;
      }
      strs=temp.split("\t");
      freq=Integer.parseInt(strs[1]);
      strs=strs[0].split("@");
      if ((fromId=InitDictionary.getWordId(strs[0])) <= 0) {
        fromId=0;
      }
      if ((toId=InitDictionary.getWordId(strs[1])) <= 0) {
        toId=-1;
      }
      to=new BigramEntry(toId,freq);
      int index=Arrays.binarySearch(result[fromId],to);
      if (index > -1) {
        continue;
      }
 else {
        BigramEntry[] newBranches=new BigramEntry[result[fromId].length + 1];
        int insert=-(index + 1);
        System.arraycopy(result[fromId],0,newBranches,0,insert);
        System.arraycopy(result[fromId],insert,newBranches,insert + 1,result[fromId].length - insert);
        newBranches[insert]=to;
        result[fromId]=newBranches;
      }
    }
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    IOUtil.close(reader);
  }
  return result;
}
